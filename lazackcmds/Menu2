// handler.js
// Menu command handler for Silva MD Bot
//"@SilvaTechB/Baileys": "github:SilvaTechB/Baileys",//
import pkg from '@SilvaTechB/Baileys'; // Import from your custom Baileys fork
import moment from 'moment-timezone';
import { createHash } from 'crypto';
import { xpRange } from '../lib/levelling.js';

const { proto, prepareWAMessageMedia, generateWAMessageFromContent } = pkg;

let handler = async (m, { conn, usedPrefix }) => {
    try {
        // Initialize date and time-related variables
        const now = new Date(new Date().getTime() + 3600000);
        const locale = 'en';
        const weekDay = now.toLocaleDateString(locale, { weekday: 'long' });
        const fullDate = now.toLocaleDateString(locale, { day: 'numeric', month: 'long', year: 'numeric' });
        const uptime = clockString(process.uptime() * 1000);

        // Determine the target user
        const target = m.quoted?.sender || m.mentionedJid?.[0] || (m.fromMe ? conn.user.jid : m.sender);

        if (!(target in global.db.data.users)) {
            throw '✳️ The user is not found in my database.';
        }

        const user = global.db.data.users[target];
        const { level } = user;
        const { min, xp, max } = xpRange(level, global.multiplier);
        const greeting = getGreeting();

        const menuText = `
『 *Silva MD Bot* 』  
© 2025 *Silvatech Inc*

Welcome to the Silva MD Bot. Use the menu below to interact with the bot effectively.`;

        // Prepare menu content
        const menuMessage = generateWAMessageFromContent(
            m.chat,
            {
                viewOnceMessage: {
                    message: {
                        messageContextInfo: { deviceListMetadata: {}, deviceListMetadataVersion: 2 },
                        interactiveMessage: proto.Message.InteractiveMessage.create({
                            body: { text: menuText },
                            footer: { text: "Use the buttons below:" },
                            header: {
                                ...(await prepareWAMessageMedia({ image: { url: './media/shizo.jpg' } }, { upload: conn.waUploadToServer })),
                                title: null,
                                subtitle: null,
                                hasMediaAttachment: false,
                            },
                            nativeFlowMessage: {
                                buttons: [
                                    {
                                        name: "menu_buttons",
                                        buttonParamsJson: JSON.stringify({
                                            title: "Tap to Open",
                                            sections: [
                                                {
                                                    title: "Here are the menu options:",
                                                    highlight_label: "Silva",
                                                    rows: [
                                                        { title: "🎁 Bot Menu", description: "Control panel for the bot.", id: `${usedPrefix}botmenu` },
                                                        { title: "🖲️ Owner Menu", description: "Admin options for the bot.", id: `${usedPrefix}ownermenu` },
                                                        { title: "🎉 AI Menu", description: "Your AI assistants.", id: `${usedPrefix}aimenu` },
                                                        { title: "🎧 Audio Menu", description: "Audio customization tools.", id: `${usedPrefix}aeditor` },
                                                        { title: "🍫 Anime Menu", description: "Anime stickers, images, and videos.", id: `${usedPrefix}animemenu` },
                                                        { title: "🛫 Group Menu", description: "Tools for managing groups.", id: `${usedPrefix}groupmenu` },
                                                        { title: "💵 Economy Menu", description: "Virtual economy management.", id: `${usedPrefix}economymenu` },
                                                        { title: "🎭 Fun Menu", description: "Games, jokes, and fun!", id: `${usedPrefix}funmenu` },
                                                        { title: "🗂️ Download Menu", description: "Downloading tools.", id: `${usedPrefix}dlmenu` },
                                                        { title: "🎮 Game Menu", description: "Enter the game zone.", id: `${usedPrefix}gamemenu` },
                                                        { title: "🫐 Sticker Menu", description: "Sticker creation tools.", id: `${usedPrefix}stickermenu` },
                                                        { title: "🏵️ Logo Menu", description: "Logo creation tools.", id: `${usedPrefix}logomenu` },
                                                        { title: "🌄 NSFW Menu", description: "After dark content.", id: `${usedPrefix}nsfwmenu` },
                                                    ],
                                                },
                                            ],
                                        }),
                                    },
                                ],
                            },
                        }),
                    },
                },
            },
            {}
        );

        // Send the generated menu message
        await conn.relayMessage(menuMessage.key.remoteJid, menuMessage.message, {
            messageId: menuMessage.key.id,
        });
    } catch (error) {
        console.error("Error generating menu:", error);
        m.reply("An error occurred while generating the menu.");
    }
};

handler.help = ['men2', 'hel2', 'h', 'commands2'];
handler.tags = ['group'];
handler.command = ['men2', 'hel2', 'h', 'command2'];

export default handler;

// Utility Functions

// Format uptime as HH:MM:SS
function clockString(ms) {
    const h = Math.floor(ms / 3600000) || 0;
    const m = Math.floor((ms % 3600000) / 60000) || 0;
    const s = Math.floor((ms % 60000) / 1000) || 0;
    return [h, m, s].map((unit) => unit.toString().padStart(2, '0')).join(':');
}

// Return a contextual greeting based on the current time
function getGreeting() {
    const hour = moment.tz('Asia/Karachi').hour();
    if (hour < 4) return "Happy early morning ☀️";
    if (hour < 10) return "Good morning 🌅";
    if (hour < 15) return "Good afternoon 🕑";
    if (hour < 18) return "Good evening 🌇";
    return "Good night 🌙";
}
